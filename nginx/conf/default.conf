# events { }

# http {

  ###################################
  set mydomain 'enershare.zapto.org';
  ###################################

  # include /etc/nginx/mime.types;

  add_header X-Content-Type-Options nosniff;
  add_header X-XSS-Protection "1; mode=block";
  add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";
  # add_header X-Frame-Options "SAMEORIGIN";
  # add_header Referrer-Policy "origin";
  # add_header Content-Security-Policy "default-src 'self';"

  # server_tokens off;

  # Enable CORS
  add_header 'Access-Control-Allow-Origin' '*';

  add_header 'Access-Control-Allow-Origin' "$http_origin" always;
  add_header 'Access-Control-Allow-Credentials' 'true' always;
  add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
  add_header 'Access-Control-Allow-Headers' 'Accept,Authorization,Cache-Control,Content-Type,DNT,If-Modified-Since,Keep-Alive,Origin,User-Agent,X-Requested-With' always;
  
  # required to be able to read Authorization header in frontend
  add_header 'Access-Control-Expose-Headers' 'Authorization' always;

  if ($request_method = 'OPTIONS') {
    # Tell client that this pre-flight info is valid for 20 days
    add_header 'Access-Control-Max-Age' 1728000;
    add_header 'Content-Type' 'text/plain charset=UTF-8';
    add_header 'Content-Length' 0;
    return 204;
  }

  server {
    listen 80;
    listen [::]:80;
    server_name $mydomain;
    # charset utf-8;

    location ~ /.well-known/acme-challenge {
      allow all;
      root /var/www/certbot;
    }

    location / {
      # rewrite ^ https://$host$request_uri? permanent;
      return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    listen [::]:443;
    server_name $mydomain;
    # charset utf-8;

    ssl_certificate /etc/letsencrypt/live/$mydomain/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$mydomain/privkey.pem;

    ssl_session_cache shared:SSL:50m;
    ssl_session_timeout 1d;
    # ssl_session_tickets off;

    # to generate your dhparam.pem file, run in the terminal
    # openssl dhparam -out /etc/nginx/ssl/dhparam.pem 2048
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    ssl_prefer_server_ciphers on;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers "DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-CHACHA20-POLY1305";

    # access_log /var/log/nginx/nginx.vhost.access.log;
    # error_log /var/log/nginx/nginx.vhost.error.log;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    proxy_set_header Host               $host;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto  $scheme;

    # proxy_set_header Host $http_host;
    # proxy_set_header X-NginX-Proxy true;
    proxy_set_header X-Forwarded-Host   $host;

    # proxy_hide_header Access-Control-Allow-Origin;
    # add_header Access-Control-Allow-Origin $http_origin;

    # proxy_buffers 4 256k;
    # proxy_buffer_size 128k;
    # proxy_busy_buffers_size 256k;

    #=================#
    # Reverse proxies #
    #=================#

    # location ~ ^/(editor|ui)/ {
    location /node-red {
      proxy_pass http://node-red:1880;

      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      # proxy_buffering off;
      proxy_buffers 4 256k;
      proxy_buffer_size 128k;
      proxy_busy_buffers_size 256k;

      rewrite ^/node-red/(.*)$ /$1 break;
    }

    location /checkHeaders {
      proxy_pass http://172.17.0.1:1880/check/;

      proxy_set_header document_root             $document_root;
      proxy_set_header host                      $host;
      proxy_set_header hostname                  $hostname;
      proxy_set_header http_host                 $http_host;
      proxy_set_header http_upgrade              $http_upgrade;
      proxy_set_header http_user_agent           $http_user_agent;
      proxy_set_header http_x_forwarded_for      $http_x_forwarded_for;
      proxy_set_header nginx_version             $nginx_version;
      proxy_set_header proxy_add_x_forwarded_for $proxy_add_x_forwarded_for;
      proxy_set_header remote_addr               $remote_addr;
      proxy_set_header remote_addr               $remote_addr;
      proxy_set_header remote_port               $remote_port;
      proxy_set_header request_id                $request_id;
      proxy_set_header request_uri               $request_uri;
      proxy_set_header scheme                    $scheme;
      proxy_set_header server_addr               $server_addr;
      proxy_set_header server_port               $server_port';
      proxy_set_header time_local                $time_local;
    }

    location /ip {
        proxy_pass http://ifconfig.me;

        rewrite ^/ip/(.*)$ /$1 break;
    }

    # Keyrock
    location /keyrock/ {
      proxy_pass http://keyrock:3005;

      proxy_set_header    X-Forwarded-Host   $host;
      proxy_set_header    Host               $host;
      proxy_set_header    X-Real-IP          $remote_addr;
      proxy_set_header    X-Forwarded-For    $proxy_add_x_forwarded_for;

      rewrite ^/keyrock(/.*)$  $1 break;

      proxy_redirect / /keyrock/;
      sub_filter '="/' '="/keyrock/';
      sub_filter '= "/' '= "/keyrock/';
      sub_filter '=\'/' '=\'/keyrock/';

      sub_filter_once off;
    }

    location /idm/ {
      proxy_pass http://keyrock:3005;
    }

    location /img/ {
      proxy_pass http://keyrock:3005;
    }

    # Orion
    location /orion/ {
      proxy_pass http://orion:1026;
      rewrite ^/orion/(.*)$ /$1 break;
    }

    location /wilma/ {
      proxy_pass http://orion-proxy:1027;
      rewrite ^/orion/(.*)$ /$1 break;
    }

    # Test them
    location /editor {
      proxy_pass http://node-red:1880;
    }

    location /ui {
      proxy_pass http://node-red:1880;
    }

    location /v2 {
      proxy_pass http://orion-proxy:1027;
    }

    location /ngsi-ld {
      proxy_pass http://orion-proxy:1027;
    }

    # Blockchain
    location /rpc {
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;
      proxy_set_header X-NginX-Proxy true;
      proxy_pass http://ganache:8545/;
    }

    #=============#
    # Web servers #
    #=============#

    # Nginx web server (/home/www/public_html/localhost/public/uploads)
    location /uploads {
      root /home/www/public_html/localhost/public;
      autoindex on;
    }

    # Nginx web server (/home/www/public_html/localhost/public)
    location /public {
      root /home/www/public_html/localhost;
      autoindex on;
    }

    #===========#
    # Redirects #
    #===========#

    location / {
        # return 301 /node-red$request_uri$
        return 301 https://$host/node-red;
    }

  # error_page 500 502 503 504 /5xx.html;
  # location /5xx.html {
  #   root /www/error_pages/;
  # }

  }

#}
