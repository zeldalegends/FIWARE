services:

  # Orion Context Broker v2 (legacy)
  orion-v2:
    image: fiware/orion #:3.11.0
    hostname: context-broker
    container_name: fiware-orion-v2
    depends_on:
      - mongo-db
    restart: always
    expose:
      - "1026"
  # ports:
  #   - "1026:1026" # http://localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -noCache

  # Orion Context Broker LD
  orion-ld:
    image: fiware/orion-ld:1.5.1
    hostname: orion
    container_name: fiware-orion-ld
  # depends_on:
  #   mongo-db:
  #     condition: service_healthy
    depends_on:
      - mongo-db
    restart: always
  # networks:
  #   - default
    expose:
      - "1026"
  # ports:
  #   - "1027:1026" # http://localhost:1027
    command: -dbhost mongo-db -db orionld -logLevel DEBUG -forwarding # -experimental
    healthcheck:
      test: curl --fail --silent http://localhost:1026/ngsi-ld/ex/v1/version
  #   test: curl --fail -s http://orion:1026/version || exit 1
  #   interval: 30s
  #   timeout: 30s
  #   start_period: 0s
  #   start_interval: 5s
  #   retries: 3

  # Mongo DB for Orion
  mongo-db:
    image: mongo:5 #:4.4 (for LD) #:6.0 (for v2)
    hostname: mongo
    container_name: db-mongo
    restart: always
    expose:
      - "27017"
    command: --nojournal
    volumes:
    # - mongo-config:/data/configdb
      - mongo-db:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: mongo --eval "db.adminCommand('ping')" --quiet

  # Mongo DB front-end (optional)
  mongo-express:
    image: mongo-express #:1.0.2
    hostname: me
    container_name: fe-mongo
    depends_on:
      - mongo-db
    restart: always
    expose:
      - "8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=
      - ME_CONFIG_BASICAUTH_PASSWORD=
      - ME_CONFIG_MONGODB_SERVER=mongo-db
    healthcheck:
      test: wget --quiet --spider http://admin:pass@localhost:8081

  # ===============
  # FIWARE Security
  # ===============

  # Keyrock IdM
  keyrock:
    image: fiware/idm #:8.4.0
    hostname: idm
    container_name: fiware-keyrock
    depends_on:
      - mysql-db
    restart: always
    expose:
      - "3005"
    ports:
      - "3005:3005" # http://localhost:3005
    # - "3443:3443" # https://localhost:3443
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS=secret
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:3005
      - IDM_PORT=3005
      - IDM_HTTPS_ENABLED=false
      - IDM_HTTPS_PORT=3443
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*

  # MySQL DB for Keyrock
  mysql-db:
    image: mysql #:8.3.0
    hostname: mysql
    container_name: db-mysql
    restart: always
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-db:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: mysqladmin ping -h localhost -uroot -psecret

  # docker exec db-mysql /usr/bin/mysqldump --databases -u root --password=secret idm > backup.sql
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm

  # MySQL DB front-end (optional)
  phpmyadmin:
    image: phpmyadmin #:5.2.1
    hostname: pma
    container_name: fe-mysql
    depends_on:
      - mysql-db
    restart: always
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql-db
      - PMA_USER=root
      - PMA_PASSWORD=secret
    healthcheck:
      test: curl --fail --silent http://localhost

  # Wilma PEP Proxy for Orion-v2
  orion-v2-proxy:
    image: fiware/pep-proxy #:8.4.0
    hostname: pep-proxy
    container_name: fiware-orion-v2-proxy
    depends_on:
     - keyrock
     - orion-v2
    restart: always
    expose:
      - "1027"
    ports:
      - "1025:1027" # http://localhost:1026
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-v2
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version

  # Wilma PEP Proxy for Orion-LD
  orion-ld-proxy:
    image: fiware/pep-proxy #:8.4.0
    hostname: wilma
    container_name: fiware-orion-ld-proxy
    depends_on:
     - keyrock
     - orion-ld
    restart: always
    expose:
      - "1027"
    ports:
      - "1027:1027" # http://localhost:1027
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version,/ngsi-ld/ex/v1/version

  # ==============
  # Other services
  # ==============

  # Context Provider, Custom IoT Agent, Demo & Open API (Swagger)
  node-red:
    image: nodered/node-red:latest-18 #:3.1.7
  # build: node-red
    hostname: ${HOSTNAME:-node-red}
    container_name: node-red
    depends_on:
     - keyrock
     - orion-v2-proxy
     - orion-ld-proxy
     - ganache
    restart: always
    expose:
      - "1880"
    ports:
      - "1880:1880" # http://localhost:1880
    environment:
      - TZ=Europe/Amsterdam
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
    # - node-red-data:/data
      - ./node-red/data:/data
      - ./public:/public

  # NGINX Reverse Proxy and Web Server for NGSI-LD @context files
  nginx:
    image: nginx #:1.25.4
    hostname: web-server
    container_name: nginx
    depends_on:
      - node-red
    restart: always
    networks:
      default:
        aliases:
          - context
          - ld-context
    expose:
      - "80"
      - "443"
    ports:
      - "80:80"   # http://localhost
      - "443:443" # https://localhost
    volumes:
      - ./certbot/conf:/etc/letsencrypt:ro # Let's Encrypt (Certbot)
    # - ./certbot/www:/var/www/certbot:ro  # Let's Encrypt (Certbot)
    # - ./certbot/dhparam:/etc/ssl/certs   # Let's Encrypt (Certbot)
                                      
    # - ./nginx/conf:/etc/nginx/conf.d
                                      
      - ./public:/home/www/public_html/localhost/public
  # command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
  # command: "/bin/sh -c 'trap exit TERM; while :; do nginx -s reload; sleep 6h & wait $${!}; done & nginx -g \"daemon off;\"'"
    healthcheck:
    # test: curl -k https://localhost/data-models/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}' | grep -q -e '200')
    # test: curl -k -sf https://localhost/public/data-models/ngsi-context.jsonld || exit 1
      test: curl -k -sf http://localhost || exit 1

  # Let's Encrypt with Certbot
  certbot:
    image: certbot/certbot #:v2.10.0
    hostname: letsencrypt
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
    # - ./certbot/www:/var/www/certbot:rw
    # - ./certbot/var:/var/lib/letsencrypt
    depends_on:
      - nginx
  # Run with staging (testing)
  # command: certonly --webroot -w /var/www/certbot -d my.domain.org -m my@email.com --no-eff-email --agree-tos --rsa-key-size 4096 --staging -v -n
  # Run forcing renewal (init)
  # command: certonly --webroot -w /var/www/certbot -d my.domain.org -m my@email.com --no-eff-email --agree-tos --rsa-key-size 4096 --keep --force-renewal -v -n
  # Run normally (operational)
  # command: certonly --webroot -w /var/www/certbot -d my.domain.org -m my@email.com --no-eff-email --agree-tos --rsa-key-size 4096 --keep -v -n
  # 
  # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
                                                                                                            ###############    ##############
  # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot/ -d <my.domain.org> -m <my@email.com> --no-eff-email --agree-tos --keep -n -v --rsa-key-size 4096; sleep 12h & wait $${!}; done;'"
                                                                                                            ###############    ##############
    entrypoint: /bin/sh -c 'trap exit TERM; while :; do certbot certonly --webroot -w /var/www/certbot/ -d enershare.zapto.org -m a@b.com --no-eff-email --agree-tos --rsa-key-size 4096 --keep -n -v; sleep 12h & wait $${!}; done;'
    healthcheck:
      test: test -n '$$(ls -A /etc/letsencrypt/live/)' || test '$$DRY_RUN' == 'true'

  # Blockchain with deployed PoE smart contract
  ganache:
  # image: trufflesuite/ganache
    image: hybuild/ganache
    hostname: ganache
    container_name: ganache
    restart: always
    expose:
      - "7545"
    ports:
      - "7545:7545" # http://localhost:7545
  # command: --database.dbPath /db --server.host 0.0.0.0 --server.port 7545 --wallet.mnemonic "visit carpet logic blame furnace confirm rebel deliver medal mean illness error"
    volumes:
      - ganache-db:/db
    healthcheck:
      test: node -e "fetch('http://localhost:7545', { method:'POST', headers:{ 'content-type':'application/json' }, body:JSON.stringify({ id:1, jsonrpc:'2.0', method:'eth_blockNumber' }) }).then(res => res.json()).then(res => process.exit(0)).catch(err => process.exit(1));"

  # MQTT Broker (MosQuiTTo)
  mosquitto:
    image: eclipse-mosquitto #:2.0.15
    hostname: mqtt
    container_name: mosquitto
    restart: always
    expose:
      - "1883"
      - "9001"
    ports:
      - "1883:1883" # http://localhost:1883
      - "9001:9001" # http://localhost:9001
    command: mosquitto -c /mosquitto-no-auth.conf
    # volumes:
    # - mosquitto-data:/mosquitto/data  
    # - mosquitto-log:/mosquitto/log  
    healthcheck:
      test: mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error

# # docker exec -it mosquitto mosquitto_sub -h mosquitto -t "/#"
# # docker exec -it mosquitto mosquitto_pub -h mosquitto -m "Hello world!" -t "/test"

volumes:
  ganache-db: ~
# mongo-config: ~
  mongo-db: ~
# mosquitto-data:
# mosquitto-log:
  mysql-db: ~
# node-red-data:
