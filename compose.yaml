services:

  # Orion Context Broker (v2 and LD)
  orion-ld:
    image: fiware/orion-ld:1.5.1
    hostname: orion
    container_name: orion-ld
    depends_on:
      - mongo-db
    restart: on-failure
    expose:
      - "1026"
  # ports:
  #   - "10260:1026" # http://localhost:10260
    command: -dbhost mongo-db -db orionld -logLevel DEBUG -forwarding # -experimental
    healthcheck:
      test: curl --fail -s http://localhost:1026/version || exit 1
    # interval: 30s
    # timeout: 30s
    # start_period: 0s
    # start_interval: 5s
    # retries: 3

# # Orion v2 Context Broker
# orion-v2:
#   image: fiware/orion #:3.11.0
#   hostname: orion
#   container_name: orion-v2
#   depends_on:
#     mongo-db:
#       condition: service_healthy
# # restart: on-failure # for Docker Compose
# # deploy:             # for Docker Swarm
# #   mode: replicated
# #   replicas: 3
# #   restart_policy:
# #     condition: on-failure
# # networks:
# #   - default
#   expose:
#     - "1026"
# # ports:
# #   - "10260:1026" # localhost:1026 (Orion v2)
#   command: -dbURI mongodb://mongo

  # Mongo DB for Orion Context Broker
  mongo-db:
    image: mongo:4.4 #(for LD) #:6.0 (for v2)
    hostname: mongo
    container_name: db-mongo
    restart: on-failure
    expose:
      - "27017"
    command: --nojournal
    volumes:
      - mongo-config:/data/configdb
      - mongo-db:/data/db
      - ./mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
    # test: ["CMD", "mongo --quiet --eval db.runCommand('ping')"]
      test: mongo --eval "db.adminCommand('ping')" --quiet
      interval: 15s

  # Mongo DB front-end
  mongo-express:
    image: mongo-express #:1.0.2
    container_name: fe-mongo
    hostname: me
    depends_on:
      - mongo-db
    restart: on-failure
    expose:
      - "8081"
    environment:
      - ME_CONFIG_BASICAUTH_USERNAME=
      - ME_CONFIG_BASICAUTH_PASSWORD=
      - ME_CONFIG_MONGODB_SERVER=mongo-db
    healthcheck:
      test: wget --quiet --spider http://admin:pass@localhost:8081

  # docker run --rm --network fiware_default -d --name fe-mongo -e ME_CONFIG_MONGODB_SERVER=mongo-db mongo-express
  # docker run --rm --network fiware_default -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg ngrok/ngrok http fe-mongo:8081

  # Keyrock IdM
  keyrock:
    image: fiware/idm #:8.4.0
    hostname: idm
    container_name: keyrock
    depends_on:
      - mysql-db
    restart: on-failure
    expose:
      - "3005"
    ports:
      - "3005:3005" # http://localhost:3005
    # - "3443:3443" # https://localhost:3443
    environment:
      - DEBUG=idm:*
      - IDM_DB_HOST=mysql-db
      - IDM_DB_PASS=secret
      - IDM_DB_USER=root
      - IDM_HOST=http://localhost:3005
      - IDM_PORT=3005
      - IDM_HTTPS_ENABLED=false
      - IDM_HTTPS_PORT=3443
      - IDM_ADMIN_USER=alice
      - IDM_ADMIN_EMAIL=alice-the-admin@test.com
      - IDM_ADMIN_PASS=test
      - IDM_CSP_FORM_ACTION=*

  # MySQL DB for Keyrock IdM
  mysql-db:
    image: mysql #:8.3.0
    hostname: mysql
    container_name: db-mysql
    restart: on-failure
    expose:
      - "3306"
    environment:
      - MYSQL_ROOT_PASSWORD=secret
      - MYSQL_ROOT_HOST=%
    volumes:
      - mysql-db:/var/lib/mysql
      - ./mysql:/docker-entrypoint-initdb.d/:ro
    healthcheck:
      test: mysqladmin ping -h localhost -uroot -psecret

  # docker exec db-mysql /usr/bin/mysqldump --databases -u root --password=secret idm > backup.sql
  # cat backup.sql | docker exec -i db-mysql /usr/bin/mysql -u root --password=secret idm

  # MySQL DB front-end
  phpmyadmin:
    image: phpmyadmin #:5.2.1
    hostname: pma
    container_name: fe-mysql
    depends_on:
      - mysql-db
    restart: on-failure
    expose:
      - "80"
    environment:
      - PMA_HOST=mysql-db
      - PMA_USER=root
      - PMA_PASSWORD=secret
    healthcheck:
      test: curl --fail --silent http://localhost

  # docker run --rm --network fiware_default -d --name fe-mysql phpmyadmin
  # docker run --rm --network fiware_default -e NGROK_AUTHTOKEN=2L2kdrNlcTBcxDERiOxTW3kyEaV_3siN3rWauYmt4KLGHrHZg -e PMA_HOST=mysql-db -e PMA_USER=root -e PMA_PASSWORD=secret ngrok/ngrok:latest http fe-mysql

  # Wilma PEP Proxy for Orion-LD
  orion-proxy:
    image: fiware/pep-proxy #:8.4.0
    hostname: wilma
    container_name: orion-proxy
    depends_on:
     - keyrock
     - orion-ld
    restart: on-failure
    expose:
      - "1027"
    ports:
      - "1026:1027" # http://localhost:1026
    environment:
      - DEBUG=pep-proxy:*
      - PEP_PROXY_DEBUG=true
      - PEP_PROXY_APP_HOST=orion-ld
      - PEP_PROXY_APP_PORT=1026
      - PEP_PROXY_PORT=1027
      - PEP_PROXY_IDM_HOST=keyrock
      - PEP_PROXY_HTTPS_ENABLED=false
      - PEP_PROXY_AUTH_ENABLED=false
      - PEP_PROXY_IDM_SSL_ENABLED=false
      - PEP_PROXY_IDM_PORT=3005
      - PEP_PROXY_APP_ID=tutorial-dckr-site-0000-xpresswebapp
      - PEP_PROXY_USERNAME=pep_proxy_00000000-0000-0000-0000-000000000000
      - PEP_PASSWORD=test
      - PEP_PROXY_PDP=idm
      - PEP_PROXY_MAGIC_KEY=1234
      - PEP_PROXY_PUBLIC_PATHS=/version,/ngsi-ld/ex/v1/version

  # Node-RED Custom IoT Agent + Open API (Swagger)
  node-red:
    # image: hybuild/openapi:latest
    image: nodered/node-red:latest-18 #:3.1.7
    # build: node-red
    hostname: ${HOSTNAME:-node-red}
    container_name: node-red
    depends_on:
     - keyrock
     - orion-proxy
    restart: on-failure
    ports:
    # - "4041:8080"
      - "1880:1880" # http://localhost:1880
    environment:
      - TZ=Europe/Amsterdam
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
    # - node-red-data:/data
      - ./node-red/data:/data
      - ./public:/public

  # NGINX Reverse Proxy and Web Server for NGSI-LD @context files
  nginx:
    image: nginx #:1.25.4
    hostname: web-server
    container_name: nginx
    depends_on:
      - node-red
    restart: on-failure
    networks:
      default:
        aliases:
          - context
          - ld-context
    ports:
      - "80:80"   # http://localhost
      - "443:443" # https://localhost
    volumes:
    # - ./nginx/ssl/:/etc/ssl/             # CA-signed (ZeroSSL)
      - ./certbot/conf:/etc/letsencrypt:ro # Let's Encrypt (Certbot)
      - ./certbot/www:/var/www/certbot:ro  # Let's Encrypt (Certbot)
    # - ./certbot/dhparam:/etc/ssl/certs   # Let's Encrypt (Certbot)
    # - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    # - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./public:/home/www/public_html/localhost/public
    # entrypoint: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    healthcheck:
      # test: curl -k https://localhost/data-models/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}' | grep -q -e '200')
      test: curl -k -sf https://localhost/data-models/ngsi-context.jsonld || exit 1

  # Let's Encrypt with Certbot
  certbot:
    image: certbot/certbot #:v2.10.0
    hostname: letsencrypt
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt:rw
      - ./certbot/www:/var/www/certbot:rw
      - ./certbot/var:/var/lib/letsencrypt
    depends_on:
      - nginx
    # Initialize
    # command: certonly --webroot --webroot-path=/var/www/certbot --email abc@test.com --agree-tos --no-eff-email -d enershare.zapto.org --staging # --text --rsa-key-size 4096 --verbose --keep-until-expiring --preferred-challenges=http
    # Operations
    # command: certonly --webroot --webroot-path=/var/www/certbot --email abc@test.com --agree-tos --no-eff-email -d enershare.zapto.org --force-renewal # --rsa-key-size 4096 --verbose --keep-until-expiring --preferred-challenges=http
    # entrypoint: certonly --webroot -w /var/www/certbot/ -d smartenergy.duckdns.org -m test@email.com --agree-tos --keep -n -v --rsa-key-size 4096
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    healthcheck:
      test: test -n '$$(ls -A /etc/letsencrypt/live/)' || test '$$DRY_RUN' == 'true'

  # Blockchain with deployed PoE smart contract
  blockchain:
    image: hybuild/ganache
    hostname: ganache
    container_name: blockchain
    restart: on-failure    # for Docker Compose
  # deploy:                # for Docker Swarm
  #   mode: replicated
  #   replicas: 3
  #   restart_policy:
  #     condition: on-failure
  # expose:
  #   - 7545               # ganache:7545    
    ports:
      - 7545:7545          # localhost:7545
    volumes:
      - ganache-db:/db
    healthcheck:
      test: node -e "fetch('http://localhost:7545', { method:'POST', headers:{ 'content-type':'application/json' }, body:JSON.stringify({ id:1, jsonrpc:'2.0', method:'eth_blockNumber' }) }).then(res => res.json()).then(res => process.exit(0)).catch(err => process.exit(1));"

# # Blockchain (Truffle Ganache)
# blockchain:
#   image: trufflesuite/ganache
#   hostname: ganache
#   container_name: blockchain
#   restart: on-failure
#   expose:
#     - "8545"
#   ports:
#     - "8545:8545" # http://localhost:8545
#   command: --database.dbPath /db --server.host 0.0.0.0 --server.port 8545 --wallet.mnemonic "visit carpet logic blame furnace confirm rebel deliver medal mean illness error"
#   volumes:
#     - ganache-db:/db
#   healthcheck:
#   # test: curl -f -X POST --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' http://localhost:8545 && exit 0 || exit 1
#   # test: node -e 'data = JSON.stringify({jsonrpc:"2.0", method:"eth_blockNumber", params:[], id:1}); require("http").request({hostname:"localhost", port:8545, method:"POST", headers:{"Content-Type":"application/json", "Content-Length":data.length }}, resp => resp.on("data", chunk => process.exit(0)).on("error", err => process.exit(1))).write(data)' && exit 0 || exit 1
#   # test: ["CMD", "node", "-e", "const req = require('http').request({hostname:'localhost', port:8545, method:'POST', headers:{ 'Content-Type':'application/json' }}, res => res.on('data', chunk => process.exit(0))).on('error', e => process.exit(1)); req.write(JSON.stringify({ jsonrpc:'2.0', method:'eth_blockNumber', params:[], id:1 })); req.end();"]
#   # test: ["CMD", "node", "-e", "require('http').request({ hostname:'localhost', port:8545, method:'POST', headers:{ 'Content-Type':'application/json', 'Content-Length':63 }}, res => res.on('data', chunk => process.exit(0)).on('error', err => process.exit(1))).write(JSON.stringify({jsonrpc:'2.0', method:'eth_blockNumber', params:[], id:1}))"]
#     test: node -e fetch('http://localhost:8545', { method:'POST', headers:{ 'content-type':'application/json' }, body:JSON.stringify({ id:1, jsonrpc:'2.0', method:'eth_blockNumber' }) }).then(res => res.json()).then(res => process.exit(0)).catch(err => process.exit(1));

# # MQTT Broker (MosQuiTTo)
# mosquitto:
#   image: eclipse-mosquitto #:2.0.15
#   hostname: mqtt
#   container_name: mosquitto
#   restart: on-failure
#   expose:
#     - "1883"
#     - "9001"
#   ports:
#     - "1883:1883" # http://localhost:1883
#     - "9001:9001" # http://localhost:9001
#   command: mosquitto -c /mosquitto-no-auth.conf
#   healthcheck:
#     test: mosquitto_sub -t '$$SYS/#' -C 1 | grep -v Error
#     interval: 15s
#
# # docker exec -it mosquitto mosquitto_sub -h mosquitto -t "/#"
# # docker exec -it mosquitto mosquitto_pub -h mosquitto -m "Hello world!" -t "/test"

volumes:
  ganache-db: ~
  mongo-config: ~
  mongo-db: ~
  mysql-db: ~
# node-red-data:
